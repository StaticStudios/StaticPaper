--- a/aspaper-server/build.gradle.kts
+++ b/aspaper-server/build.gradle.kts
@@ -1,10 +_,7 @@
 import io.papermc.fill.model.BuildChannel
 import io.papermc.paperweight.attribute.DevBundleOutput
-import io.papermc.paperweight.util.*
-import io.papermc.paperweight.util.data.FileEntry
-import paper.libs.com.google.gson.annotations.SerializedName
+import io.papermc.paperweight.util.Git
 import java.time.Instant
-import kotlin.io.path.readText
 
 plugins {
     `java-library`
@@ -35,7 +_,30 @@
         }
     }
 
-    activeFork = aspaper
+    val staticpaper = forks.register("staticpaper") {
+        forks = aspaper
+
+        upstream.patchRepo("paperServer") {
+            upstreamRepo = aspaper.patchedRepo("paperServer")
+            patchesDir = rootDirectory.dir("staticpaper-server/paper-patches")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+
+        upstream.patchDir("aspaperServer") {
+            upstreamPath = "aspaper-server"
+            excludes = setOf(
+                "src/minecraft",
+                "paper-patches",
+                "minecraft-patches",
+                "build.gradle.kts",
+                "build.gradle.kts.patch",
+            )
+            patchesDir = rootDirectory.dir("staticpaper-server/aspaper-patches")
+            outputDir = rootDirectory.dir("aspaper-server")
+        }
+    }
+
+    activeFork = staticpaper
 
     spigot {
         enabled = true
@@ -70,6 +_,7 @@
     @get:Inject
     abstract val archiveOperations: ArchiveOperations
 }
+
 val services = objects.newInstance<Services>()
 
 if (project.providers.gradleProperty("publishDevBundle").isPresent) {
@@ -122,10 +_,14 @@
     main {
         java { srcDir("../paper-server/src/main/java") }
         resources { srcDir("../paper-server/src/main/resources") }
+        java { srcDir("../aspaper-server/src/main/java") }
+        resources { srcDir("../aspaper-server/src/main/resources") }
     }
     test {
         java { srcDir("../paper-server/src/test/java") }
         resources { srcDir("../paper-server/src/test/resources") }
+        java { srcDir("../aspaper-server/src/test/java") }
+        resources { srcDir("../aspaper-server/src/test/resources") }
     }
 }
 val log4jPlugins = sourceSets.create("log4jPlugins") {
@@ -142,6 +_,7 @@
 
 // Configure mockito agent that is needed in newer java versions
 val mockitoAgent = configurations.register("mockitoAgent")
+
 abstract class MockitoAgentProvider : CommandLineArgumentProvider {
     @get:CompileClasspath
     abstract val fileCollection: ConfigurableFileCollection
@@ -151,9 +_,20 @@
     }
 }
 
+repositories {
+    maven {
+        name = "infernalsuite snapshots"
+        url = uri("https://repo.infernalsuite.com/repository/maven-snapshots/")
+    }
+    maven {
+        name = "infernalsuite release"
+        url = uri("https://repo.infernalsuite.com/repository/maven-public/")
+    }
+}
+
 dependencies {
-    implementation(project(":aspaper-api")) //ASP
-    implementation(project(":core")) //ASP
+    implementation(project(":staticpaper-api")) //ASP
+    implementation("com.infernalsuite.asp:core:4.2.0-SNAPSHOT-3ec7916222cf4110e0aa128b0a7d4ee44f72ed69") //ASP
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -194,7 +_,9 @@
     testImplementation("org.junit.platform:junit-platform-suite-engine:1.12.2")
     testImplementation("org.hamcrest:hamcrest:2.2")
     testImplementation("org.mockito:mockito-core:5.14.1")
-    mockitoAgent("org.mockito:mockito-core:5.14.1") { isTransitive = false } // Configure mockito agent that is needed in newer java versions
+    mockitoAgent("org.mockito:mockito-core:5.14.1") {
+        isTransitive = false
+    } // Configure mockito agent that is needed in newer java versions
     testImplementation("org.ow2.asm:asm-tree:9.8")
     testImplementation("org.junit-pioneer:junit-pioneer:2.2.0") // CartesianTest
 
@@ -224,14 +_,14 @@
         val gitBranch = git.exec(providers, "rev-parse", "--abbrev-ref", "HEAD").get().trim()
         attributes(
             "Main-Class" to "org.bukkit.craftbukkit.Main",
-            "Implementation-Title" to "AdvancedSlimePaper", //ASP
+            "Implementation-Title" to "StaticPaper", // StaticPaper
             "Implementation-Version" to implementationVersion,
             "Implementation-Vendor" to date,
-            "Specification-Title" to "AdvancedSlimePaper", //ASP
+            "Specification-Title" to "StaticPaper", // StaticPaper
             "Specification-Version" to project.version,
-            "Specification-Vendor" to "InfernalSuite Team", //ASP
-            "Brand-Id" to "infernalsuite:advancedslimepaper", //ASP
-            "Brand-Name" to "AdvancedSlimePaper", //ASP
+            "Specification-Vendor" to "StaticStudios", // StaticPaper
+            "Brand-Id" to "staticstudios:staticpaper", // StaticPaper
+            "Brand-Name" to "StaticPaper", // StaticPaper
             "Build-Number" to (build ?: ""),
             "Build-Time" to buildTime.toString(),
             "Git-Branch" to gitBranch,
@@ -290,7 +_,8 @@
     jvmArgumentProviders.add(provider)
 }
 
-val generatedDir: java.nio.file.Path = rootProject.layout.projectDirectory.dir("paper-server/src/generated/java").asFile.toPath()
+val generatedDir: java.nio.file.Path =
+    rootProject.layout.projectDirectory.dir("paper-server/src/generated/java").asFile.toPath()
 idea {
     module {
         generatedSourceDirs.add(generatedDir.toFile())
@@ -396,7 +_,9 @@
 
 fill {
     project("paper")
-    versionFamily(paperweight.minecraftVersion.map { it.split(".", "-").takeWhile { part -> part.toIntOrNull() != null }.take(2).joinToString(".") })
+    versionFamily(paperweight.minecraftVersion.map {
+        it.split(".", "-").takeWhile { part -> part.toIntOrNull() != null }.take(2).joinToString(".")
+    })
     version(paperweight.minecraftVersion)
 
     build {
